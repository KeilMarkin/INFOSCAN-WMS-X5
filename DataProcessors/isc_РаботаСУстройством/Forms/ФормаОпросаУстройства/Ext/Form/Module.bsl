        
&НаКлиенте
Процедура StartSession(Команда)
	Если УстановитьСоединенияНаСервере() = Ложь Тогда
		ПоказатьОповещениеПользователя("Ошибка подключения",,"Не удалось установить подключение к оборудованию. Проверьте настройки.");
		Возврат;
	КонецЕсли;	
	ПодключитьОбработчикОжидания("StartSessionНаКл", 5, Ложь);  
	ПоказатьОповещениеПользователя("Внимание.",,"Начат опрос устройства. Начинайте сканировать товар.");
КонецПроцедуры

&НаКлиенте
Процедура StartSessionНаКл()
	ЗаполнитьТчНаСервере(); 
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТчНаСервере(ЧитатьИсторию = Ложь)
	соотДанныеСОборудования = ПрочитатьДанныеОборудования(ЧитатьИсторию);
	
	Если соотДанныеСОборудования = Ложь Или Не ЗначениеЗаполнено(соотДанныеСОборудования["barcode"]) Тогда Возврат; КонецЕсли;
	мНайденныхСтрок =  Объект.HistoriOfScaning.НайтиСтроки(Новый Структура("Barcode", соотДанныеСОборудования["barcode"]));
	Если мНайденныхСтрок.Количество() > 0 Тогда 
		//заменим данные в таблице полученными жанными
		стч = мНайденныхСтрок[0];	
	Иначе
		стч = Объект.HistoriOfScaning.Добавить();
	КонецЕсли;	
	стч.Barcode = соотДанныеСОборудования["barcode"];
	стч.Length 	= соотДанныеСОборудования["length"];
	стч.Width 	= соотДанныеСОборудования["width"];
	стч.Height 	= соотДанныеСОборудования["height"];
	стч.Weight 	= соотДанныеСОборудования["weight"];
	стч.Ratio 	= соотДанныеСОборудования["ratio"];
	стч.Status = 4;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ШтрихкодыОбъектовХранения.ОбъектХранения КАК ОбъектХранения,
	|	ШтрихкодыОбъектовХранения.Упаковка КАК Упаковка
	|ИЗ
	|	РегистрСведений.ШтрихкодыОбъектовХранения КАК ШтрихкодыОбъектовХранения
	|ГДЕ
	|	ШтрихкодыОбъектовХранения.Штрихкод = &Штрихкод";
	Запрос.УстановитьПараметр("Штрихкод", соотДанныеСОборудования["barcode"]);	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(стч, Выборка);
		стч.Status = 1;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПрочитатьДанныеОборудования(ЧитатьИсторию)
	соотДанныеСОборудования = Новый Соответствие;
	ТелоОтвета = Справочники.isc_Настройки.УстановитьСоединениеНаСервере( Ложь, ЧитатьИсторию);//УстановитьСоединенияНаСервере(Ложь, ЧитатьИсторию);
	
	Если ТелоОтвета = Ложь Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Чтение = Новый ЧтениеJSON;
	Чтение.ОткрытьПоток(ТелоОтвета);
	стк = ПрочитатьJSON(Чтение);
	Если ЧитатьИсторию Тогда
		Для Каждого элемМассива Из стк Цикл
			Для Каждого Параметр из элемМассива.data Цикл
				Если Найти("length,width,height", нрег(Параметр.Ключ)) > 0 Тогда
					соотДанныеСОборудования.Вставить(Параметр.Ключ, Число(Параметр.Значение) * 0.01);	//в сантиметрах измерения переводим в метры
				Иначе
					соотДанныеСОборудования.Вставить(Параметр.Ключ, Параметр.Значение);	
				КонецЕсли;	
				
			КонецЦикла;
		КонецЦикла; 
	Иначе
		Для Каждого Параметр из стк Цикл
			Если Найти("Length,Width,Height", Параметр.Ключ) > 0 Тогда
				соотДанныеСОборудования.Вставить(Параметр.Ключ, Число(Параметр.Значение) * 0.01);	//в сантиметрах измерения переводим в метры
			Иначе
				соотДанныеСОборудования.Вставить(Параметр.Ключ, Параметр.Значение);	
			КонецЕсли;	
			
		КонецЦикла;
	КонецЕсли;
	
	Если соотДанныеСОборудования.Получить("ratio") = Неопределено Тогда
		соотДанныеСОборудования.Вставить("ratio", 1);
	КонецЕсли;
	Чтение.Закрыть();
	Возврат соотДанныеСОборудования;
	
КонецФункции

&НаКлиенте
Процедура StopSession(Команда)
	ОтключитьОбработчикОжидания("StartSessionНаКл");
	ПоказатьОповещениеПользователя("Внимание.",,"Устройство не опрашивается.");
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьВНоменклатуруНаСервере(стч = Неопределено)
	Если стч = Неопределено Тогда
		Для Каждого строкатабчасти из Объект.HistoriOfScaning Цикл
			ЗаписьВОбъектХранения(строкатабчасти);
		КонецЦикла;
	Иначе
		ЗаписьВОбъектХранения(стч);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаписьВОбъектХранения(Знач стч)
	
	Настройки = Справочники.isc_Настройки.НайтиПоКоду("000000001");	
	сткВходныеПараметры = Новый Структура("Length, Height, Width, Weight",стч.Length, стч.Height,стч.Width, стч.Weight);
	//Каждое измерение может храниться в различных реквизитах
		Для Каждого стзМетодыХранения Из Настройки.МетодыХранения Цикл
			//Если стзМетодыХранения.МетодХраненияВГХ = Перечисления.isc_МетодХраненияВГХ.РеквизитыУпаковки Тогда
				ОбъектУпаковка = стч.Упаковка.ПолучитьОбъект(); 
				ОбъектУпаковка[стзМетодыХранения.Свойство_ИмяРеквизита] = сткВходныеПараметры[стзМетодыХранения.ИмяСвойства];
				ОбъектУпаковка.Записать();
 //   		ИначеЕсли стзМетодыХранения.МетодХраненияВГХ = Перечисления.isc_МетодХраненияВГХ.РеквизитыНоменклатуры Тогда
 //   			ОбъектХранения = стч.Номенклатура.ПолучитьОбъект(); 
 //   			ОбъектХранения[стзМетодыХранения.Свойство_ИмяРеквизита] = сткВходныеПараметры[стзМетодыХранения.ИмяСвойства];
 //   			ОбъектХранения.Записать();
 //   		ИначеЕсли стзМетодыХранения.МетодХраненияВГХ = Перечисления.isc_МетодХраненияВГХ.ДопРеквизитыНоменклатуры Тогда
 //   			ОбъектХранения = стч.Номенклатура.ПолучитьОбъект();
 //   			ЗаписатьДопРевизит(ОбъектХранения, стзМетодыХранения.Свойство_ИмяРеквизита, сткВходныеПараметры[стзМетодыХранения.ИмяСвойства]);			ИначеЕсли стзМетодыХранения.МетодХраненияВГХ = Перечисления.isc_МетодХраненияВГХ.ДопРеквизитыХарактеристики Тогда
 //   			ОбъектХранения.Записать();
 //   		ИначеЕсли стзМетодыХранения.МетодХраненияВГХ = Перечисления.isc_МетодХраненияВГХ.ДопРеквизитыХарактеристики Тогда
 //   			Если ЗначениеЗаполнено(стч.Характеристика) Тогда
 //   				ОбъектХранения = стч.Характеристика.ПолучитьОбъект(); 
 //   			Иначе 
 //   				ОбъектХранения = стч.Номенклатура.ПолучитьОбъект();
 //   			КонецЕсли;
 //   		ЗаписатьДопРевизит(ОбъектХранения, стзМетодыХранения.Свойство_ИмяРеквизита, сткВходныеПараметры[стзМетодыХранения.ИмяСвойства]);
 //   		ОбъектХранения.Записать();
 //   	ИначеЕсли стзМетодыХранения.МетодХраненияВГХ = Перечисления.isc_МетодХраненияВГХ.ДопСведенияНоменклатуры Тогда
 //   		РС = РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
 //   		РС.Объект = стч.Номенклатура; 
 //   		РС.Свойство = стзМетодыХранения.Свойство_ИмяРеквизита;
 //   		РС.Значение = сткВходныеПараметры[стзМетодыХранения.ИмяСвойства];
 //   	ИначеЕсли стзМетодыХранения.МетодХраненияВГХ = Перечисления.isc_МетодХраненияВГХ.ДопСведенияХарактеристики Тогда
 //   		РС = РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
 //   		Если ЗначениеЗаполнено(стч.Характеристика) Тогда
 //   				РС.Объект = стч.Характеристика; 
 //   			Иначе 
 //   				РС.Объект = стч.Номенклатура;
 //   			КонецЕсли;
 //
 //   		РС.Свойство = стзМетодыХранения.Свойство_ИмяРеквизита;
 //   		РС.Значение = сткВходныеПараметры[стзМетодыХранения.ИмяСвойства];	
 //   		КонецЕсли;
				
		стч.Status = 3;		
		КонецЦикла;
	
	   КонецПроцедуры

	   Процедура ЗаписатьДопРевизит(ОбъектЗаписи, ДопРеквизит, Значение)
		   СтрДопРек = ОбъектЗаписи.ДополнительныеРеквизиты.Найти(ДопРеквизит,"Свойство");
		   Если ЗначениеЗаполнено(СтрДопРек)Тогда
			   СтрДопРек.Значение = Значение; 
		   Иначе
			   СтрДопРек = ОбъектЗаписи.ДополнительныеРеквизиты.Добавить();
			   СтрДопРек.Свойство = ДопРеквизит;
			   СтрДопРек.Значение = Значение;
		   КонецЕсли;
		   ОбъектЗаписи.Записать();
	   КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьВНоменклатуру(Команда)
	ПоказатьВопрос(Новый ОписаниеОповещения("СохранитьВБазу", ЭтотОбъект), "Данные будут записаны согласно настройкам.Данные в реквизитах будут перезаписаны. Продолжить?", РежимДиалогаВопрос.ДаНет,,, "Предупреждение");
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВБазу(РезультатВопроса, ПараметрыЗаписи) Экспорт	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ЗагрузитьВНоменклатуруНаСервере();
		ПоказатьОповещениеПользователя("Операция завершена.");
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Функция УстановитьСоединенияНаСервере(ТестСоединения = Истина, ЧитатьИсторию = Ложь)
	Возврат Справочники.isc_Настройки.УстановитьСоединениеНаСервере(ТестСоединения, ЧитатьИсторию);
	//	СткНастройки = Справочники.isc_Настройки.ПолучитьНастройкиУстройства();
//	Если ЧитатьИсторию Тогда
//		СтраницаСервера	  = "/history";
//	Иначе         
//		СтраницаСервера = "/data";
//	КонецЕсли;
//	
//	Соединение = Новый HTTPСоединение(
//	СткНастройки.АдресУстройства, //"89.175.58.20", // сервер (хост)
//	СткНастройки.Порт, //60080, // порт, по умолчанию для http используется 80, для https 443
//	СткНастройки.Логин,  //"user", // пользователь для доступа к серверу (если он есть)
//	СткНастройки.Пароль, //"user", // пароль для доступа к серверу (если он есть)
//	, // здесь указывается прокси, если он есть
//	, // таймаут в секундах, 0 или пусто - не устанавливать
//	Новый  ЗащищенноеСоединениеOpenSSL()// защищенное соединение, если используется https
//	);
//	Запрос = Новый HTTPЗапрос(СтраницаСервера);//"/data");
//	Попытка
//		Результат = Соединение.Получить(Запрос);
//	Исключение
//		Возврат Ложь;	
//	КонецПопытки;	
//	Возврат ?(ТестСоединения, Результат.КодСостояния = 200 ,Результат.ПолучитьТелоКакПоток());	
КонецФункции

&НаКлиенте
Процедура ТестСоединения(Команда)
	УспешноПодключились = УстановитьСоединенияНаСервере();
	Если УспешноПодключились Тогда
		ПоказатьОповещениеПользователя("Успешно!",,"Успешно подключение к устройству.");	
	Иначе
		ПоказатьОповещениеПользователя("Ошибка подключения",,"Не удалось установить подключение к оборудованию. Проверьте настройки.");
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТЧ(Команда)
	Объект.HistoriOfScaning.Очистить();
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьВCSV(Команда)
	ДиалогВыбораФайла=Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);  // выбор каталога
	ДиалогВыбораФайла.Заголовок = "Укажите имя файла выгрузки!";
	Если ДиалогВыбораФайла.Выбрать() Тогда
		Путь = ДиалогВыбораФайла.ПолноеИмяФайла + ".csv";    // присваиваем переменной путь выбранного каталога + имя будущего файла    
		т = Новый ТекстовыйДокумент;
		т.УстановитьТекст(СформироватьИВернутьCSV());
		Попытка
			т.Записать(Путь);
			ПоказатьОповещениеПользователя("Успешно!",,"Файл сохранен.");
		Исключение
			
		КонецПопытки;	
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Функция СформироватьИВернутьCSV()
	ТекстCSV = "Barcode;Length;Width;Height;Weight;Ratio;КодНоменклатуры;" + Символы.ПС;;
	Для Каждого стч Из Объект.HistoriOfScaning Цикл
		ТекстCSV = ТекстCSV + 
		стч.Barcode + ";" +
		стч.Length + ";" +
		стч.Width + ";" +
		стч.Height + ";" +
		стч.Weight + ";" +
		стч.Ratio + ";" +
		стч.Номенклатура + ";" +
		Символы.ПС;
	КонецЦикла;	
	Возврат ТекстCSV;
КонецФункции	

&НаКлиенте
Процедура ПрочитатьИсториюИзмерений(Команда)
	ЗаполнитьТчНаСервере(Истина);
КонецПроцедуры

